--display all tables
select*from Enrollments;
select*from Students;
select*from  Courses;
select*from  Instructors;
select*from  Departments;

--List all students enrolled in the "Introduction to Programming" course:
SELECT s.student_name, s.email, s.phone, c.course_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Introduction to Programming';

--Get the total number of students enrolled in each course:
SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;

--Find the average grade for each course:
SELECT c.course_name, AVG(CASE e.grade
    WHEN 'A+' THEN 4.0
    WHEN 'A' THEN 4.0
    WHEN 'A-' THEN 3.7
    WHEN 'B+' THEN 3.3
    WHEN 'B' THEN 3.0
    WHEN 'B-' THEN 2.7
    WHEN 'C+' THEN 2.3
    WHEN 'C' THEN 2.0
    WHEN 'C-' THEN 1.7
    WHEN 'D+' THEN 1.3
    WHEN 'D' THEN 1.0
    WHEN 'F' THEN 0.0
    ELSE NULL END) AS average_grade
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;

--List instructors and the courses they teach:
SELECT i.instructor_name, c.course_name
FROM Instructors i
JOIN Courses c ON i.instructor_id = c.instructor_id;

--List students and their respective departments through courses:
SELECT s.student_name, d.department_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
JOIN Departments d ON c.department_id = d.department_id;


--Get the details of students who have enrolled in more than one course:
SELECT s.student_id, s.student_name, COUNT(e.course_id) AS course_count
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id, s.student_name
HAVING COUNT(e.course_id) > 1;

--List all courses taught by instructors from the 'Computer Science' department:
SELECT c.course_name, i.instructor_name, d.department_name
FROM Courses c
JOIN Instructors i ON c.instructor_id = i.instructor_id
JOIN Departments d ON i.department_id = d.department_id
WHERE d.department_name = 'Computer Science';

--Get the count of students for each grade in a specific course:
SELECT e.grade, COUNT(e.student_id) AS student_count
FROM Enrollments e
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Introduction to Programming'
GROUP BY e.grade;

--List all students along with their enrollment details and grades:
SELECT s.student_name, c.course_name, e.enrollment_date, e.grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id;

--Find the total number of courses offered by each department:
SELECT d.department_name, COUNT(c.course_id) AS course_count
FROM Departments d
JOIN Courses c ON d.department_id = c.department_id
GROUP BY d.department_name;

--List the top 3 students with the highest average grades across all their courses:
SELECT s.student_id, s.student_name, AVG(
    CASE e.grade
        WHEN 'A+' THEN 4.0
        WHEN 'A' THEN 4.0
        WHEN 'A-' THEN 3.7
        WHEN 'B+' THEN 3.3
        WHEN 'B' THEN 3.0
        WHEN 'B-' THEN 2.7
        WHEN 'C+' THEN 2.3
        WHEN 'C' THEN 2.0
        WHEN 'C-' THEN 1.7
        WHEN 'D+' THEN 1.3
        WHEN 'D' THEN 1.0
        WHEN 'F' THEN 0.0
        ELSE NULL END) AS avg_grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id, s.student_name
ORDER BY avg_grade DESC
LIMIT 3;

--Find the courses that have more than 2 students enrolled and the average grade for those courses:
SELECT c.course_name, COUNT(e.student_id) AS student_count, AVG(
    CASE e.grade
        WHEN 'A+' THEN 4.0
        WHEN 'A' THEN 4.0
        WHEN 'A-' THEN 3.7
        WHEN 'B+' THEN 3.3
        WHEN 'B' THEN 3.0
        WHEN 'B-' THEN 2.7
        WHEN 'C+' THEN 2.3
        WHEN 'C' THEN 2.0
        WHEN 'C-' THEN 1.7
        WHEN 'D+' THEN 1.3
        WHEN 'D' THEN 1.0
        WHEN 'F' THEN 0.0
        ELSE NULL END) AS average_grade
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name
HAVING COUNT(e.student_id) > 2;


